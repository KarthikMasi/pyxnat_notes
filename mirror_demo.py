#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
from pyxnat import Interface

# Change this for different projects
P = '2096'

xnat = Interface('http://masi.vuse.vanderbilt.edu/xnat', 'sburns', 'Whitaker240!!')
# Passing no arguments, this will ask for values at the commandline
# xnat = Interface()
# Or, you can pass installation URL, username, password
# xnat = Interface('http://masi.vuse.vanderbilt.edu', 'sburns', MYPASSWORD)


"""

xnat.select is the most useful function

You can select by full paths:

project = xnat.select('/project/MYPROJ')
subject = xnat.select('/project/MYPROJ/subject/MYSUBJ')
all_subjects = xnat.select('/project/MYPROJ/subject/*')

"""

project = xnat.select.project(P)
all_subjects = xnat.select('/project/%s/subjects/*' % P)


"""
Subject Attributes

sub.id()    -----> XNAT's internal name
sub.label() -----> Exposed name that can be changed

"""

for subject in all_subjects:
    print subject.id(), subject.label()

"""
Drilling down the Heirarchy

project/
    MYPROJ
        subject/
            MYSUBJ
                experiment/
                    MYEXP
                        scan/
                            MYSCAN
                                resource/
                                    MYRES
                                        file
                                            MYFILE

All objects have a .get()/.fetchone(),.fetchall()/.first()

Any of these accessor functions can take 'label', 'id', 'obj' or any combination:
- 'label' is the user defined name for object
- 'id' is XNAT's name for the object
- 'obj' is a python object

You could also specify more than one, e.g.:

stuff = experiment.scans().fetchall('id', 'obj'))
for scan_id, scan_obj in stuff:
    <do stuff with each scan>
"""
# A real basic tree traversal
subject = all_subjects.fetchone()
for experiment in subject.experiments().fetchall('obj'):
    for scan in experiment.scans().fetchall('obj'):
        for resource in scan.resources().fetchall('obj'):
            for file in resource.files().fetchall('obj'):
                print subject.label(), experiment.label(), scan.label(), resource.label(), file.label()

"""
We can do better and weed out stuff we don't want...

Couple bits of information...

- scan.attrs.get('type') is the protocol name
- We're really only interested in the 'DICOM' resources (these are the actual images from the scanner)
    - secondary resources are generated by the scanner, but not really useful
    - SNAPSHOTS are created by XNAT, they're gifs, not very useful (but nice to look at through browser)

Maybe we could (re) construct DICOM names like we get from getstudy...
"""
pi_lname = project.attrs.get('pi_lastname')
experiment = subject.experiments().fetchone()
label =  experiment.label()
for scan in experiment.scans().fetchall('obj'):
    protocol = scan.attrs.get('type').replace(' ', '_')
    scan_num = '%02d' % (int(scan.label()) / 100)
    subscan_num = '%02d' % (int(scan.label()) % 100)
    good_fname = '_'.join([pi_lname, label, scan_num, subscan_num, protocol]) + '.DCM'
    print good_fname
    try:
        good_resource = [res for res in scan.resources().fetchall('obj') if res.label() == 'DICOM'][0]
        files = good_resource.files().get()
        good_file = good_resource.file(files[0])
        #  Download the file under TOP_DIR
        local_fname = os.path.join('TOP_DIR', good_fname)
        # good_file.get(local_fname)
    except IndexError:
        print("No DICOM resources for scan %s :(" % scan.label())
